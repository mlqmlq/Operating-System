
// memory for user processes, kernel stacks, page table pages,
// and pipe buffers. Allocates 4096-byte pages.

#include "types.h"
#include "defs.h"
#include "param.h"
#include "mmu.h"
#include "spinlock.h"

#define NUM_PAGE (int)(((char*)PHYSTOP-(char*)PGROUNDUP((uint)end))/PGSIZE)

struct run {
  struct run *next;
  //int pg_idx;
};

struct {
  struct spinlock lock;
  struct run *freelist;
} kmem;

struct {
  struct spinlock lock;
  struct run *inuselist;
} inuse;

extern char end[]; // first address after kernel loaded from ELF file

// Initialize free list of physical pages.
void
kinit(void)
{
  char *p;

  initlock(&kmem.lock, "kmem");
  initlock(&inuse.lock, "inuse");
  p = (char*)PGROUNDUP((uint)end);
  for(; p + PGSIZE <= (char*)PHYSTOP; p += PGSIZE)
    kfree(p);
}

// Free the page of physical memory pointed at by v,
// which normally should have been returned by a
// call to kalloc().  (The exception is when
// initializing the allocator; see kinit above.)
void
kfree(char *v)
{
  struct run *r;

  if((uint)v % PGSIZE || v < end || (uint)v >= PHYSTOP) 
    panic("kfree");

  // Fill with junk to catch dangling refs.
  memset(v, 1, PGSIZE);

  r = (struct run*)v;
 
  struct run *curr;
  char *dummy_page = (char*)(PHYSTOP+PGSIZE);
  struct run *dummy;
  dummy = (struct run*)dummy_page;
  
  acquire(&kmem.lock);
  dummy->next = kmem.freelist;
  curr = dummy;
  while (curr->next && (char*)curr->next > (char*)r){
      curr = curr->next;
  }
  r->next = curr->next; 
  curr->next = r;
  kmem.freelist = dummy->next;
  release(&kmem.lock);
  
  acquire(&inuse.lock);
  dummy->next = inuse.inuselist;
  curr = dummy;
  while (curr->next && (char*)curr->next != (char*)r){
      curr = curr->next;
  }
  if (curr->next){
      curr->next = curr->next->next;
  }
  inuse.inuselist = dummy->next;
  release(&inuse.lock);

}

// Allocate one 4096-byte page of physical memory.
// Returns a pointer that the kernel can use.
// Returns 0 if the memory cannot be allocated.
char*
kalloc(void)
{
  //struct run *r;

  acquire(&kmem.lock);
  char *dummy_page = (char*)(PHYSTOP+PGSIZE);
  struct run *dummy;
  dummy = (struct run*)dummy_page;
  dummy->next = kmem.freelist;
  struct run *prev = dummy;
  struct run *curr = prev->next;
  while (curr->next) {
      if (((char*)prev - (char*)curr == PGSIZE) &&
          ((char*)curr - (char*)curr->next == PGSIZE))
          break;
      prev = curr;
      curr = curr->next;
  }
  if (curr->next){
      prev->next = curr->next;
  } else if ((char*)curr == (char*)PGROUNDUP((uint)end) 
          && (char*)prev == (char*)PGROUNDUP((uint)end) + PGSIZE){
      prev->next = curr->next;
  } else {
      curr = curr->next;
  }
  kmem.freelist = dummy->next;
  release(&kmem.lock);
  if (curr) {
      acquire(&inuse.lock);
      curr->next = inuse.inuselist;
      inuse.inuselist = curr;
      release(&inuse.lock);
  }
  return (char*)curr;
  
  //r = kmem.freelist;
  //if(r)
  //  kmem.freelist = r->next;
  //release(&kmem.lock);
  //return (char*)r;
}

int 
dump_allocated(int* frames, int numframes){
    struct run *curr = inuse.inuselist;
    for (int i = 0; i < numframes; i++){
        if (!curr)
            return -1;
        frames[i] = (uint)curr;
        curr = curr->next;
    }   
    return 0;
}
